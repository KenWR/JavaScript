JavaScript에는 거의 모든것이 object이다

querySelector를 많이 사용

on이라고 시작하는 것들은 죄다 event다

title.addEventListener("click", functionName)과 같이 
특정 이벤트로 특정 function이 실행되게 하고 싶으면 
() 라는 실행 키워드를 생략한 채 자바스크립트에 전달하고
자바스크립트가 해당 function을 작동하게 만들어야한다.

https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement
여기에 많은 property와 event들이 있다.

property.onevent보다
property.addEventListener("event" functionName)를 선호하는 이유는
나중에 removeEventListener로 지워줄 수 있기 때문이다.

https://bamtory29.tistory.com/entry/javascript-script%ED%83%9C%EA%B7%B8%EC%9D%98-%EC%9C%84%EC%B9%98
위의 링크에서는 JS를 HTML에 적용시키는 스크립트 태그 위치를 어떻게 정하는게
좋은지에 대해 잘 적혀있다.

1. <head>~</head> 사이
<body>요소 내부에서 함수를 호출 해야할 때 <head>에 기술하여 미리 로드하도록 한다.
스크립트내부에서 스타일 시트를 조작할 때 본문 출력 이전에 미리 로드하도록 한다.

2. <body>태그의 내부 (<body>~</body>사이)
스크립트의 처리 결과를 직접 출력할 때 이용했었으나 코드와 스크립트의 혼용은 혼란을 불러일으키고 유지보수를 어렵게 하기에 사용되지 않습니다. 
비사용 권장

3. </body>태그의 바로 앞
위에서 언급된 웹 페이지의 처리에 따라 모든 화면이 렌더되고나서 스크립트가 실행 되므로 
실제로 보이는(갱신되는) 화면의 속도가 고속화 됩니다. 
그래서 주로 </body>태그 직전에 <script>태그를 삽입하게됩니다.

또한 <head>태그에 삽입했을 때 일어나는 window.onload 관련 오류나 
기타 처리가 필요 없기에 주로 이부분에 <script>태그 삽입을 하게됩니다.

javascript 와 css HTML은 나눠서 쓰자 각자 역할에 맞게

style에는 CSS
animation에는 JS

event.preventDefault(); 는 이벤트를
브라우저를 통채로 멈추지 않게 일시정지해준다.

setInterval(function, A000);
밀리세컨트
함수를 A초마다 반복한다는 의미.
바로 실행 X
A초 후 첫 시작이 되고 A초마다 계속 반복된다.

setTimeout(function, A000);
A초 기다렸다가 한번만 실행.

new Date().toLocaleTimeString();
오후 xx : xx : xx 로 표기해줌

명언 api 적용완료

AJAX로 JSON 형식 값을 받아와서 해당 JSON데이터에서
원하는 부분의 배열만 가져오고 다시 String으로 변환해서
명언을 가져왔다!

















